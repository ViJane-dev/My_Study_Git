import UIKit

//Lesson ----- Замыкания и клоужеры -----/

// клоужеры
// клоужер не может существовать просто так. мы должны поместить его в какую-то константу и написать знак равенства
let closure = {
    print("Hello, World!")
}

//как использовать наш клоужер

func repeatThreeTimes(closure: () -> ()) { // передаем в нашу функцию пустой клоужер
    for _ in 0...2 {
        closure() // передаем в тело функции тот клоужер которые обьявлен выше
    }
}
repeatThreeTimes(closure: closure) // вызываем функцию с параметром в виде ранее объявленного клоужера


// -------- пример номер два  ----------------


//func repeatThreeTimes(closure: () -> ()) {
//    for _ in 0...2 {
//        closure()
//    }
//}
//repeatThreeTimes(closure: {
//    () -> () in        // внутри клоужера указываем явно обязательно его тип!!!!
//    print("Hello, World!")
//}) // вызываем функцию с параметром в виде необходимого клоужера


// -------- чтобы из обычного замыкания сделать последующее замыкание, - нужно сделать вот так  ----------------


//func repeatThreeTimes(closure: () -> ()) {
//    for _ in 0...2 {
//        closure()
//    }
//}
//repeatThreeTimes /* удаляем "(closure: */ {
//    () -> () in
//    print("Hello, World!")
//} /* удаляем в конце вот такую круглую скобку ")" */
// в итоге получается вот так:
//repeatThreeTimes{
//    () -> () in
//    print("Hello, world!")
//}


let unsortedArray = [123, 2, 32, 67, 8797, 432]
// хотим отсортировать наш массив

let sortedArray = unsortedArray.sorted {
    (number1: Int, number2: Int) -> Bool in
    
    return number1 < number2
}


// клоужер это безымянная функция
// чаще всего передается как аргумент в качестве завершающего обработчика какой-либо информации или данных, либо в качестве алгоритма который можно также использовать в каком-то определенном месте
